<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.zk.keepingservice">


    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />

    <!--方法3、添加Manifest文件属性值为android:persistent=“true”-->
    <!--app.persistent = true不仅仅标志着此apk不能轻易的被kill掉，亦或在被kill掉后能够自动restart，并且还涉及到了进程的优先级。将被设置为CORE_SERVER_ADJ，此值为-12，而核心进程init的值为-16。当前正在前台运行的进程的值为0。如果应用能设置这个属性，那就真的可以做到保活，因为他真的可以杀不死，像系统的keyguard进程，media进程，且这些进程的adj都是负数，代表了前台activity黑屏了他们也不会死。但是这个属性需要系统shareuid，然后编译不过，因为需要系统签名！-->
    <!--因此，要弄这个属性需获取两个关键的信息：-->
    <!--(1).在apk的AndroidManifest.xml文件中设置android:persistent=true-->
    <!--(2).此apk需要放入到system/app目录下，成为一个systemapp-->
    <!--最主要的是让程序成为系统程序，这个可以做到吗？如果你技术过硬是可以尝试下的！首先弄个自动root的apk，加壳放到程序中，然后程序运行的时候，自动运行自动root的apk，获取root权限，然后在native层中，使用命令的方式把程序移到system/app目录下，成为系统程序！-->
    <application
        android:persistent="true"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <service
            android:name="com.example.zk.service.MainService"
            android:enabled="true"
            android:exported="true" />
        <service
            android:name="com.example.zk.service.KeepingService"
            android:enabled="true"
            android:exported="true"></service>

        <service
            android:name="com.example.zk.service.MainJobService"
            android:permission="android.permission.BIND_JOB_SERVICE"
            android:enabled="true"
            android:exported="true"
            android:process=":push"/>

        <receiver android:name="com.example.zk.broadcast.UniversalBroadcast">
            <intent-filter>
                <!--关闭或打开飞行模式时的广播-->
                <action android:name="android.intent.action.AIRPLANE_MODE" />
                <!--充电状态，或者电池的电量发生变化//电池的充电状态、电荷级别改变，不能通过组建声明接收这个广播，只有通过Context.registerReceiver()注册-->
                <action android:name="android.intent.action.BATTERY_CHANGED" />
                <!--表示电池电量低-->
                <action android:name="android.intent.action.BATTERY_LOW" />
                <!--表示电池电量充足-->
                <action android:name="android.intent.action.BATTERY_OKAY" />
                <!--在系统启动完成后，这个动作被广播一次（只有一次）。-->
                <action android:name="android.intent.action.BOOT_COMPLETED" />
                <!--按下照相时的拍照按键(硬件按键)时发出的广播-->
                <action android:name="android.intent.action.CAMERA_BUTTON" />
                <!--当屏幕超时进行锁屏时,当用户按下电源按钮,长按或短按(不管有没跳出话框)，进行锁屏时,android系统都会广播此Action消息-->
                <action android:name="android.intent.action.CLOSE_SYSTEM_DIALOGS" />
                <!--设备当前设置被改变时发出的广播(包括的改变:界面语言，设备方向，等，请参考Configuration.java)-->
                <action android:name="android.intent.action.CONFIGURATION_CHANGED" />
                <!--设备日期发生改变时会发出此广播-->
                <action android:name="android.intent.action.DATE_CHANGED" />
                <!--设备内存不足时发出的广播,此广播只能由系统使用，其它APP不可用-->
                <action android:name="android.intent.action.DEVICE_STORAGE_LOW" />
                <!--设备内存从不足到充足时发出的广播,此广播只能由系统使用，其它APP不可用-->
                <action android:name="android.intent.action.DEVICE_STORAGE_OK" />
                <!--发出此广播的地方frameworks\base\services\java\com\android\server\DockObserver.java-->
                <action android:name="android.intent.action.DOCK_EVENT" />
                <!--移动APP完成之后，发出的广播(移动是指:APP2SD)-->
                <action android:name="android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE" />
                <!--正在移动APP时，发出的广播(移动是指:APP2SD)-->
                <action android:name="android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE" />
                <!--Gtalk已建立连接时发出的广播-->
                <action android:name="android.intent.action.GTALK_CONNECTED" />
                <!--Gtalk已断开连接时发出的广播-->
                <action android:name="android.intent.action.GTALK_DISCONNECTED" />
                <!--在耳机口上插入耳机时发出的广播-->
                <action android:name="android.intent.action.HEADSET_PLUG" />
                <!--改变输入法时发出的广播-->
                <action android:name="android.intent.action.INPUT_METHOD_CHANGED" />
                <!--设备当前区域设置已更改时发出的广播-->
                <action android:name="android.intent.action.LOCALE_CHANGED" />
                <!--表示用户和包管理所承认的低内存状态通知应该开始。-->
                <action android:name="android.intent.action.MANAGE_PACKAGE_STORAGE" />
                <!--未正确移除SD卡(正确移除SD卡的方法:设置SD卡和设备内存卸载SD卡)，但已把SD卡取出来时发出的广播 ,扩展介质（扩展卡）已经从 SD 卡插槽拔出，但是挂载点 (mount point) 还没解除 (unmount)-->
                <action android:name="android.intent.action.MEDIA_BAD_REMOVAL" />
                <!--按下"Media Button" 按键时发出的广播,假如有"Media Button" 按键的话(硬件按键)-->
                <action android:name="android.intent.action.MEDIA_BUTTON" />
                <!--插入外部储存装置，比如SD卡时，系统会检验SD卡，此时发出的广播?-->
                <action android:name="android.intent.action.MEDIA_CHECKING" />
                <!--已拔掉外部大容量储存设备发出的广播（比如SD卡，或移动硬盘）,不管有没有正确卸载都会发出此广播, 用户想要移除扩展介质（拔掉扩展卡）-->
                <action android:name="android.intent.action.MEDIA_EJECT" />
                <!--插入SD卡并且已正确安装（识别）时发出的广播, 扩展介质被插入，而且已经被挂载。-->
                <action android:name="android.intent.action.MEDIA_MOUNTED" />
                <!--拓展介质存在，但使用不兼容FS（或为空）的路径安装点检查介质包含在Intent.mData领域。-->
                <action android:name="android.intent.action.MEDIA_NOFS" />
                <!--外部储存设备已被移除，不管有没正确卸载,都会发出此广播， 扩展介质被移除。-->
                <action android:name="android.intent.action.MEDIA_REMOVED" />
                <!--广播：已经扫描完介质的一个目录-->
                <action android:name="android.intent.action.MEDIA_SCANNER_FINISHED" />
                <!--请求媒体扫描仪扫描文件并将其添加到媒体数据库。-->
                <action android:name="android.intent.action.MEDIA_SCANNER_SCAN_FILE" />
                <!--广播：开始扫描介质的一个目录-->
                <action android:name="android.intent.action.MEDIA_SCANNER_STARTED" />
                <!--广播：扩展介质的挂载被解除 (unmount)，因为它已经作为 USB 大容量存储被共享-->
                <action android:name="android.intent.action.MEDIA_SHARED" />
                <!---->
                <action android:name="android.intent.action.MEDIA_UNMOUNTABLE" />
                <!--广播：扩展介质存在，但是还没有被挂载 (mount)-->
                <action android:name="android.intent.action.MEDIA_UNMOUNTED" />
                <!--拨号-->
                <action android:name="android.intent.action.NEW_OUTGOING_CALL" />
                <!--成功的安装APK之后//广播：设备上新安装了一个应用程序包。//一个新应用包已经安装在设备上，数据包括包名（最新安装的包程序不能接收到这个广播）-->
                <action android:name="android.intent.action.PACKAGE_ADDED" />
                <!--一个已存在的应用程序包已经改变，包括包名-->
                <action android:name="android.intent.action.PACKAGE_CHANGED" />
                <!--/清除一个应用程序的数据时发出的广播(在设置－－应用管理－－选中某个应用，之后点清除数据时?)//用户已经清除一个包的数据，包括包名（清除包程序不能接收到这个广播）-->
                <action android:name="android.intent.action.PACKAGE_DATA_CLEARED" />
                <!--触发一个下载并且完成安装时发出的广播，比如在电子市场里下载应用？-->
                <action android:name="android.intent.action.PACKAGE_INSTALL" />
                <!--成功的删除某个APK之后发出的广播, 一个已存在的应用程序包已经从设备上移除，包括包名（正在被安装的包程序不能接收到这个广播）-->
                <action android:name="android.intent.action.PACKAGE_REMOVED" />
                <!--替换一个现有的安装包时发出的广播（不管现在安装的APP比之前的新还是旧，都会发出此广播？）-->
                <action android:name="android.intent.action.PACKAGE_REPLACED" />
                <!--用户重新开始一个包，包的所有进程将被杀死，所有与其联系的运行时间状态应该被移除，包括包名（重新开始包程序不能接收到这个广播）-->
                <action android:name="android.intent.action.PACKAGE_RESTARTED" />
                <!--插上外部电源时发出的广播-->
                <action android:name="android.intent.action.ACTION_POWER_CONNECTED" />
                <!--已断开外部电源连接时发出的广播-->
                <action android:name="android.intent.action.ACTION_POWER_DISCONNECTED" />
                <!--重启设备时的广播-->
                <action android:name="android.intent.action.REBOOT" />
                <!--屏幕被关闭之后的广播-->
                <action android:name="android.intent.action.SCREEN_OFF" />
                <!--屏幕被打开之后的广播-->
                <action android:name="android.intent.action.SCREEN_ON" />
                <!--关闭系统时发出的广播-->
                <action android:name="android.intent.action.ACTION_SHUTDOWN" />
                <!--时区发生改变时发出的广播-->
                <action android:name="android.intent.action.TIMEZONE_CHANGED" />
                <!--时间被设置时发出的广播-->
                <action android:name="android.intent.action.TIME_SET" />
                <!--广播：当前时间已经变化（正常的时间流逝）， 当前时间改变，每分钟都发送，不能通过组件声明来接收-->
                <action android:name="android.intent.action.TIME_TICK" />
                <!--一个用户ID已经从系统中移除发出的广播-->
                <action android:name="android.intent.action.UID_REMOVED" />
                <!--设备已进入USB大容量储存状态时发出的广播？-->
                <action android:name="android.intent.action.UMS_CONNECTED" />
                <!--设备已从USB大容量储存状态转为正常状态时发出的广播？-->
                <action android:name="android.intent.action.UMS_DISCONNECTED" />
                <!--解锁进入系统-->
                <action android:name="android.intent.action.USER_PRESENT" />
                <!--自定义的AlarmManager广播-->
                <action android:name="com.example.zk.service.MainService.AlarmManager" />
                <!--自定义的JobService广播-->
                <action android:name="com.example.zk.service.MainJobService.JobService" />

            </intent-filter>
        </receiver>

    </application>

</manifest>